@function retina-size($value, $type: 'floor') {
  @if ($type == 'floor') {
    @return floor($value / 2);
  } @else if ($type == 'round') {
    @return round($value / 2);
  } @else if ($type == 'ceil') {
    @return ceil($value / 2);
  } @else {
    @return floor($value / 2);
  }
}

@mixin retina-bg-size($spriteWidth, $spriteHeight) {
  background-size: round($spriteWidth / 2) auto;
}

@media
only screen and (-webkit-min-device-pixel-ratio: 2),
only screen and (   min--moz-device-pixel-ratio: 2),
only screen and (     -o-min-device-pixel-ratio: 2/1),
only screen and (        min-device-pixel-ratio: 2),
only screen and (                min-resolution: 192dpi),
only screen and (                min-resolution: 2dppx) {
  .iti-flag {
    $item-width-maps: ({{#items}}{{strings.name}}: {{px.width}}, {{/items}});
    $standard-country: 'ac';
    width: retina-size(map-get($item-width-maps, $standard-country));

    @each $key, $width in $item-width-maps {
      @if $width != map-get($item-width-maps, $standard-country) {
        &.#{$key} {
          width: retina-size($width, 'floor');
        }
      }
    }

    @include retina-bg-size({{spritesheet.px.width}}, {{spritesheet.px.height}});

    {{#items}}
    &.{{strings.name}} {
      height: retina-size({{px.height}}, 'floor');
      background-position: retina-size({{px.offset_x}}, 'round') retina-size({{px.offset_y}}, 'round');
    }
    {{/items}}
  }
}
